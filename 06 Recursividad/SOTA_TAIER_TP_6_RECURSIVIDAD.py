# 1) Crea una funci√≥n recursiva que calcule el factorial de un n√∫mero. Luego, utiliza esa funci√≥n para calcular y mostrar en pantalla el factorial de todos los n√∫meros enteros entre 1 y el n√∫mero que indique el usuario

def factorial(n: int) -> int:
    if n == 0 or n == 1:
        return 1
    else:
        return n * factorial(n - 1)

numero = int(input("Ingrese un n√∫mero: "))
print(f"El factorial de {numero} es: {factorial(numero)}")

# 2) Crea una funci√≥n recursiva que calcule el valor de la serie de Fibonacci en la posici√≥n indicada. Posteriormente, muestra la serie completa hasta la posici√≥n que el usuario especifique.

def fibonacci(n: int) -> int:
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)

posicion = int(input("Ingrese la posici√≥n de Fibonacci: "))
print(f"El valor en la posici√≥n {posicion} de la serie de Fibonacci es: {fibonacci(posicion)}")
print("Serie de Fibonacci hasta la posici√≥n", posicion, ":")
for i in range(posicion + 1):
    print(fibonacci(i), end=" ")

# 3) Crea una funci√≥n recursiva que calcule la potencia de un n√∫mero base elevado a un exponente, utilizando la f√≥rmula ùëõ ùëö = ùëõ ‚àó ùëõ (ùëö‚àí1). Prueba esta funci√≥n en un algoritmo general.

def potencia(base: int, exponente: int) -> int:
    if exponente == 0:
        return 1
    else:
        return base * potencia(base, exponente - 1)

base = int(input("\nIngrese la base: "))
exponente = int(input("Ingrese el exponente: "))
print(f"{base} elevado a {exponente} es: {potencia(base, exponente)}")

# 4) Crear una funci√≥n recursiva en Python que reciba un n√∫mero entero positivo en base decimal y devuelva su representaci√≥n en binario como una cadena de texto.
def decimal_a_binario(n: int) -> str:
    if n == 0:
        return ""
    else:
        return decimal_a_binario(n // 2) + str(n % 2)

numero_decimal = int(input("\nIngrese un n√∫mero entero positivo decimal: "))
print(f"El n√∫mero {numero_decimal} en binario es: {decimal_a_binario(numero_decimal)}")

#5) Implement√° una funci√≥n recursiva llamada es_palindromo(palabra) que reciba una cadena de texto sin espacios ni tildes, y devuelva True si es un pal√≠ndromo o False si no lo es.

def es_palindromo(palabra: str) -> bool:
    if len(palabra) <= 1:
        return True
    if palabra[0] != palabra[-1]:
        return False
    return es_palindromo(palabra[1:-1])
palabra = input("\nIngrese una palabra sin espacios ni tildes: ").lower()
if es_palindromo(palabra):
    print(f"{palabra} es un pal√≠ndromo.")
else:
    print(f"{palabra} no es un pal√≠ndromo.")


# 6) Escrib√≠ una funci√≥n recursiva en Python llamada suma_digitos(n) que reciba un n√∫mero entero positivo y devuelva la suma de todos sus d√≠gitos.

def suma_digitos(n: int) -> int:
    if n == 0:
        return 0
    else:
        return n % 10 + suma_digitos(n // 10)

numero = int(input("\nIngrese un n√∫mero entero positivo: "))
print(f"La suma de los d√≠gitos de {numero} es: {suma_digitos(numero)}")

# 7) Un ni√±o est√° construyendo una pir√°mide con bloques. En el nivel m√°s bajo coloca n bloques, en el siguiente nivel uno menos (n - 1), y as√≠ sucesivamente hasta llegar al √∫ltimo nivel con un solo bloque. 
# Escrib√≠ una funci√≥n recursiva contar_bloques(n) que reciba el n√∫mero de bloques en el nivel m√°s bajo y devuelva el total de bloques que necesita para construir toda la pir√°mide. 

def contar_bloques(n: int) -> int:
    if n<=0:
        return 0
    else:
        return n + contar_bloques(n-1)

n_bloques = int(input("\nIngrese el n√∫mero de bloques en el nivel m√°s bajo: "))
print(f"El total de bloques necesarios para construir la pir√°mide es: {contar_bloques(n_bloques)}")

# 8) Escrib√≠ una funci√≥n recursiva llamada contar_digito(numero, digito) que reciba un n√∫mero entero positivo (numero) y un d√≠gito (entre 0 y 9), y devuelva cu√°ntas veces aparece ese d√≠gito dentro del n√∫mero.
def contar_digito(numero: int, digito:int) -> int:
    if numero == 0:
        return 0
    else:
        return (1 if numero % 10 == digito else 0) + contar_digito(numero // 10, digito)
    
numero = int(input("\nIngrese un n√∫mero: "))
digito = int(input("Ingrese un d√≠gito (entre 0 y 9): "))
print(f"El d√≠gito {digito} aparece {contar_digito(numero, digito)} veces en el n√∫mero {numero}.")